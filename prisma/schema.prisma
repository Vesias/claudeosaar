// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id              String      @id @default(uuid())
  email           String      @unique
  name            String?
  passwordHash    String
  apiKey          String?
  subscriptionTier String     @default("free")
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  workspaces      Workspace[]
  memoryBanks     MemoryBank[]
  usageMetrics    UsageMetric[]
}

model Workspace {
  id              String      @id @default(uuid())
  name            String
  description     String?
  template        String?
  status          String      @default("stopped")
  tier            String      @default("free")
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  containerId     String?
  containerInfo   Json?
  resources       Json        // CPU, memory, storage limits
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  memoryBanks     MemoryBank[]
  usageMetrics    UsageMetric[]
  agents          Agent[]
}

model MemoryBank {
  id              String      @id @default(uuid())
  key             String
  content         String      @db.Text
  metadata        Json?
  embedding       Unsupported("vector(1536)")?
  
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id])
  
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([workspaceId, key])
  // Vector index will be created manually via raw SQL migration
}

model Agent {
  id              String      @id @default(uuid())
  name            String
  type            String      // mcp, a2a, custom
  configuration   Json
  status          String      @default("inactive")
  
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id])
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model UsageMetric {
  id              String      @id @default(uuid())
  metric          String      // cpu, memory, storage, api_calls
  value           Float
  timestamp       DateTime    @default(now())
  
  workspaceId     String
  workspace       Workspace   @relation(fields: [workspaceId], references: [id])
  
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  @@index([timestamp])
  @@index([workspaceId, metric, timestamp])
}
